#!/bin/bash

# –ù–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_DIR="cat_bot"

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –ø–∞–ø–∫–∞
if [ -d "$PROJECT_DIR" ]; then
    echo "–û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '$PROJECT_DIR' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –£–¥–∞–ª–∏—Ç–µ –µ–µ –∏–ª–∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
    exit 1
fi

echo "–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø–∞–ø–∫–µ '$PROJECT_DIR'..."

# –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—É—é –ø–∞–ø–∫—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–µ–µ
mkdir "$PROJECT_DIR"
cd "$PROJECT_DIR"

# --- –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º ---

# .gitignore
cat << EOF > .gitignore
# –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è Python
__pycache__/
*.pyc
*.pyo
*.pyd

# –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
venv/
.venv/

# –§–∞–π–ª —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
.env

# –î–∞–Ω–Ω—ã–µ –∏ –ª–æ–≥–∏
/data/

# –§–∞–π–ª—ã IDE
.idea/
.vscode/
EOF

# requirements.txt
cat << EOF > requirements.txt
aiogram==3.4.1
python-dotenv==1.0.1
aiohttp==3.9.3
aiosqlite==0.20.0
apscheduler==3.10.4
EOF

# .env (—à–∞–±–ª–æ–Ω)
cat << EOF > .env
# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –æ—Ç @BotFather
BOT_TOKEN="–í–ê–®_–¢–ï–õ–ï–ì–†–ê–ú_–ë–û–¢_–¢–û–ö–ï–ù"

# API –∫–ª—é—á –æ—Ç TheCatApi (https://thecatapi.com/signup)
CAT_API_KEY="–í–ê–®_–ö–õ–Æ–ß_–û–¢_THECATAPI"

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)
DATABASE_NAME=./data/users.db

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤ (–≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)
LOG_FILE=./data/bot.log

# ID –≤–∞—à–µ–≥–æ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
ADMIN_ID=""
EOF

# keyboards.py
cat << 'EOF' > keyboards.py
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

def get_main_keyboard(is_subscribed: bool) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏."""
    builder = InlineKeyboardBuilder()
    
    if is_subscribed:
        builder.row(
            InlineKeyboardButton(text="‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="unsubscribe")
        )
    else:
        builder.row(
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="subscribe")
        )
        
    builder.row(
        InlineKeyboardButton(text="üê± –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ—Ç–∞", callback_data="get_cat")
    )
    return builder.as_markup()
EOF

# database.py
cat << 'EOF' > database.py
import aiosqlite
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

async def init_db(database_path: str):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    async with aiosqlite.connect(database_path) as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                subscribed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        await db.commit()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

async def is_user_subscribed(db_path: str, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."""
    async with aiosqlite.connect(db_path) as db:
        async with db.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,)) as cursor:
            return await cursor.fetchone() is not None

async def add_user(db_path: str, user_id: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É)."""
    async with aiosqlite.connect(db_path) as db:
        try:
            await db.execute("INSERT INTO users (user_id) VALUES (?)", (user_id,))
            await db.commit()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.")
        except aiosqlite.IntegrityError:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

async def remove_user(db_path: str, user_id: int):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–æ—Ç–ø–∏—Å—ã–≤–∞–µ—Ç –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏)."""
    async with aiosqlite.connect(db_path) as db:
        await db.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
        await db.commit()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")

async def get_all_users(db_path: str) -> list[int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    async with aiosqlite.connect(db_path) as db:
        async with db.execute("SELECT user_id FROM users") as cursor:
            rows = await cursor.fetchall()
            return [row[0] for row in rows]
EOF

# scheduler.py
cat << 'EOF' > scheduler.py
import logging
import aiohttp
from aiogram import Bot
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest
from database import get_all_users, remove_user

logger = logging.getLogger(__name__)

async def get_cat_image_url(api_key: str) -> str | None:
    """–ü–æ–ª—É—á–∞–µ—Ç URL —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –∫–æ—Ç–æ–º."""
    url = "https://api.thecatapi.com/v1/images/search"
    headers = {"x-api-key": api_key}
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    return data[0]['url']
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ API TheCatApi: –°—Ç–∞—Ç—É—Å {response.status}")
                    return None
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –∫–æ—Ç–æ–º: {e}")
        return None

async def send_daily_cats(bot: Bot, db_path: str, cat_api_key: str):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∫–æ—Ç–æ–≤."""
    logger.info("–ù–∞—á–∞–ª–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏...")
    users = await get_all_users(db_path)
    image_url = await get_cat_image_url(cat_api_key)

    if not image_url:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    sent_count = 0
    for user_id in users:
        try:
            await bot.send_photo(
                chat_id=user_id,
                photo=image_url,
                caption="–í–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ—Ç–∏–∫! üêæ"
            )
            sent_count += 1
        except (TelegramForbiddenError, TelegramBadRequest) as e:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã.")
            await remove_user(db_path, user_id)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –∏–∑ {len(users)} —Å–æ–æ–±—â–µ–Ω–∏–π.")
EOF

# handlers.py
cat << 'EOF' > handlers.py
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart

import database as db
import keyboards as kb
from scheduler import get_cat_image_url

router = Router()
logger = logging.getLogger(__name__)

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@router.message(CommandStart())
async def cmd_start(message: Message, db_path: str):
    user_id = message.from_user.id
    is_subscribed = await db.is_user_subscribed(db_path, user_id)
    
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –∫–æ—Ç–∏–∫–æ–≤ üò∫",
        reply_markup=kb.get_main_keyboard(is_subscribed)
    )

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–ª–±—ç–∫–∞ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
@router.callback_query(F.data == "subscribe")
async def cb_subscribe(callback: CallbackQuery, db_path: str):
    user_id = callback.from_user.id
    await db.add_user(db_path, user_id)
    await callback.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É! üéâ", show_alert=True)
    await callback.message.edit_reply_markup(reply_markup=kb.get_main_keyboard(is_subscribed=True))

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–ª–±—ç–∫–∞ "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è"
@router.callback_query(F.data == "unsubscribe")
async def cb_unsubscribe(callback: CallbackQuery, db_path: str):
    user_id = callback.from_user.id
    await db.remove_user(db_path, user_id)
    await callback.answer("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. üòø", show_alert=True)
    await callback.message.edit_reply_markup(reply_markup=kb.get_main_keyboard(is_subscribed=False))

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–ª–±—ç–∫–∞ "–ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∞"
@router.callback_query(F.data == "get_cat")
async def cb_get_cat(callback: CallbackQuery, cat_api_key: str):
    await callback.answer("–ò—â—É –∫–æ—Ç–∏–∫–∞...", show_alert=False)
    image_url = await get_cat_image_url(cat_api_key)
    if image_url:
        try:
            await callback.message.answer_photo(
                photo=image_url,
                caption="–í–æ—Ç –≤–∞—à —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ—Ç–∏–∫! ‚ù§Ô∏è"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await callback.message.answer("–û–π, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ—Ç–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    else:
        await callback.message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∫–æ—Ç–∏–∫ —É–±–µ–∂–∞–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
EOF

# bot.py
cat << 'EOF' > bot.py
import asyncio
import logging
import os
from logging.handlers import RotatingFileHandler

from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler

import database as db
from handlers import router
from scheduler import send_daily_cats

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
log_file = os.getenv('LOG_FILE', 'data/bot.log')

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
os.makedirs(os.path.dirname(log_file), exist_ok=True)

# –õ–æ–≥–≥–µ—Ä –¥–ª—è —Ñ–∞–π–ª–∞ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
file_handler = RotatingFileHandler(log_file, maxBytes=5*1024*1024, backupCount=2, encoding='utf-8')
file_handler.setFormatter(log_formatter)

# –õ–æ–≥–≥–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
console_handler = logging.StreamHandler()
console_handler.setFormatter(log_formatter)

logging.basicConfig(
    level=logging.INFO,
    handlers=[file_handler, console_handler]
)
logger = logging.getLogger(__name__)

# –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CAT_API_KEY = os.getenv("CAT_API_KEY")
DATABASE_NAME = os.getenv("DATABASE_NAME")
ADMIN_ID = os.getenv("ADMIN_ID")


async def main():
    if not BOT_TOKEN or not CAT_API_KEY or not DATABASE_NAME:
        logger.critical("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! (BOT_TOKEN, CAT_API_KEY, DATABASE_NAME)")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await db.init_db(DATABASE_NAME)
    
    bot = Bot(token=BOT_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)

    # –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Ç–∏ –∏ –∫–ª—é—á–∏ –≤ —Ö—ç–Ω–¥–ª–µ—Ä—ã —á–µ—Ä–µ–∑ middleware
    dp['db_path'] = DATABASE_NAME
    dp['cat_api_key'] = CAT_API_KEY
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä
    dp.include_router(router)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    # –í–∞–∂–Ω–æ: –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å! –ù–∞–ø—Ä–∏–º–µ—Ä, "Europe/Moscow", "Asia/Yekaterinburg"
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler.add_job(
        send_daily_cats,
        'cron',
        hour=9,
        minute=0,
        args=(bot, DATABASE_NAME, CAT_API_KEY)
    )
    scheduler.start()
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    if ADMIN_ID:
        try:
            await bot.send_message(ADMIN_ID, "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ({ADMIN_ID}): {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
EOF

# Dockerfile
cat << 'EOF' > Dockerfile
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ Python
FROM python:3.10-slim

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
WORKDIR /app

# –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
COPY requirements.txt .

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
RUN pip install --no-cache-dir -r requirements.txt

# –ö–æ–ø–∏—Ä—É–µ–º –≤–µ—Å—å –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
COPY . .

# –£–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
CMD ["python", "bot.py"]
EOF

# --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ---
echo ""
echo "‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ '$PROJECT_DIR' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!"
echo ""
echo "--- –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏: ---"
echo "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞:"
echo "   cd $PROJECT_DIR"
echo ""
echo "2. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã:"
echo "   nano .env"
echo ""
echo "3. –°–æ–±–µ—Ä–∏—Ç–µ Docker-–æ–±—Ä–∞–∑:"
echo "   docker build -t cat-bot-image ."
echo ""
echo "4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:"
echo "   docker run -d --name cat-bot-container --restart always --env-file ./.env cat-bot-image"
echo ""
echo "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
echo "   docker logs -f cat-bot-container"
echo ""