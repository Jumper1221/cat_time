# handlers.py (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.filters import CommandStart, Command

import database as db
import keyboards as kb
from scheduler import get_cat_image_url

# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
router = Router()
logger = logging.getLogger(__name__)


@router.message(CommandStart())
async def cmd_start(message: Message, db_path: str):
    user_id = message.from_user.id
    is_subscribed = await db.is_user_subscribed(db_path, user_id)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –∫–æ—Ç–∏–∫–æ–≤ üò∫",
        reply_markup=kb.get_main_keyboard(is_subscribed),
    )


@router.callback_query(F.data == "subscribe")
async def cb_subscribe(callback: CallbackQuery, db_path: str):
    user_id = callback.from_user.id
    await db.add_user(db_path, user_id)
    await callback.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É! üéâ", show_alert=True)
    await callback.message.edit_reply_markup(
        reply_markup=kb.get_main_keyboard(is_subscribed=True)
    )


@router.callback_query(F.data == "unsubscribe")
async def cb_unsubscribe(callback: CallbackQuery, db_path: str):
    user_id = callback.from_user.id
    await db.remove_user(db_path, user_id)
    await callback.answer("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. üòø", show_alert=True)
    await callback.message.edit_reply_markup(
        reply_markup=kb.get_main_keyboard(is_subscribed=False)
    )


@router.callback_query(F.data == "get_cat")
async def cb_get_cat(
    callback: CallbackQuery, cat_api_key: str, db_path: str
):  # <-- –î–æ–±–∞–≤–∏–ª–∏ db_path
    await callback.answer("–ò—â—É –∫–æ—Ç–∏–∫–∞...", show_alert=False)
    image_url = await get_cat_image_url(cat_api_key)

    if image_url:
        try:
            # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∫–æ—Ç–∞
            await callback.message.answer_photo(
                photo=image_url, caption="–í–æ—Ç –≤–∞—à —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ—Ç–∏–∫! ‚ù§Ô∏è"
            )

            # 2. –°–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
            user_id = callback.from_user.id
            is_subscribed = await db.is_user_subscribed(db_path, user_id)
            await callback.message.answer(
                "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=kb.get_main_keyboard(is_subscribed)
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await callback.message.answer(
                "–û–π, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ—Ç–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    else:
        await callback.message.answer(
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∫–æ—Ç–∏–∫ —É–±–µ–∂–∞–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


# --- –†–æ—É—Ç–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ ---
admin_router = Router()


# –í–ê–ñ–ù–û: –§–∏–ª—å—Ç—Ä IsAdmin –∑–¥–µ—Å—å –ù–ï —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è. –û–Ω –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω –≤ bot.py
@admin_router.message(Command("admin"))
async def admin_panel(message: Message, db_path: str):
    user_count = len(await db.get_all_users(db_path))

    text = (
        f"<b>üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\nüë• –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{user_count}</b>"
    )

    builder = kb.InlineKeyboardBuilder()
    builder.row(
        kb.InlineKeyboardButton(
            text="üì• –í—ã–≥—Ä—É–∑–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_export_users"
        )
    )

    await message.answer(text, reply_markup=builder.as_markup())


# –í–ê–ñ–ù–û: –§–∏–ª—å—Ç—Ä IsAdmin –∑–¥–µ—Å—å –ù–ï —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è.
@admin_router.callback_query(F.data == "admin_export_users")
async def export_users(callback: CallbackQuery, db_path: str):
    await callback.answer("–ì–æ—Ç–æ–≤–ª—é —Ñ–∞–π–ª...", show_alert=False)

    users = await db.get_all_users(db_path)

    if not users:
        await callback.message.answer("–ë–∞–∑–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø—É—Å—Ç–∞.")
        return

    user_ids_str = "\n".join(map(str, users))

    file_to_send = BufferedInputFile(
        file=user_ids_str.encode("utf-8"), filename="subscribed_users.txt"
    )

    await callback.message.answer_document(
        file_to_send, caption=f"üìÑ –°–ø–∏—Å–æ–∫ ID {len(users)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤."
    )
